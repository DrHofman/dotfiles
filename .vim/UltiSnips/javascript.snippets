# Snips #
#########

snippet rp "return new Promise()" w
return new Promise((resolve, reject) => {
  ${VISUAL}$0
})
endsnippet

# New bare unit test with proxyquire
snippet unittest "new unit test" w
'use strict';

const proxyquire = require('proxyquire');
const chai = require('chai');
const expect = chai.expect;
const sinon = require('sinon');

chai.use(require('sinon-chai'));

describe('# ${VISUAL}$1', function() {
  let module;

  beforeEach(function() {
    module = proxyquire(process.cwd() + '/path', {
    });

  });

  describe('${VISUAL}$2', function() {

    it('${VISUAL}$3', function() {
      ${VISUAL}$4
    });

  });

});

endsnippet

snippet restify "Base restify app index file" w
'use strict';

const config = require('config');
const restify = require('restify');
const restifyPlugins = require('restify-plugins');
const CookieParser = require('restify-cookies');
const logger = require('besedo-node-logger');

const appName = config.get('application.name');
const server = restify.createServer({ name: appName });

// Set the node process name
process.title = appName;

logger.init({
  name: appName,
  version: config.get('application.version'),
});

server.use(CookieParser.parse);
server.use(restifyPlugins.bodyParser({ mapParams: true }));
server.use(restifyPlugins.queryParser({ mapParams: true }));
server.use(restifyPlugins.authorizationParser());
server.use(restifyPlugins.dateParser());

server.on('restifyError', function (request, response, error, cb) {
  logger.error(error, {
    params: request.params,
    body: request.body,
  });

  return cb();
});

// We want to preserve the behaviour of exiting on
// errors but we want to log it via the logger
process.on('uncaughtException', function (error) {
  logger.error(error);
  process.exit(1);
});

// Register all routes
require('./routes/routes.js')(server, require);

server.listen(config.application.port, function () {
  logger.info(server.name + ' listening at ' + server.url);
});

// JUST TO COMMIT

endsnippet
